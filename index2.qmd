---
pagetitle: "Minimum wage own-wage elasticity database"
page-layout: custom
section-divs: false
css: index.css
editor: source
execute:
  echo: false

---

::: {.hero-banner}

::: {.content-block}
# Minimum wage own-wage elasticity database

### A collection of estimates from minimum wage research studies

::: {.hero-buttons}
[Explore](explore/subgroup_figure.html){.btn-action-primary .btn-action .btn .btn-success .btn-lg role="button"}
[Download](download.html){#btn-guide .btn-action .btn .btn-info .btn-lg role="button"}
[Documentation](documentation.html){#btn-guide .btn-action .btn .btn-info .btn-lg role="button"}
::: 

:::
:::

::: {.content-block}

```{ojs}
viewof country = Inputs.radio(new Map([["Any country", null], ["United States", "US"]]), {value: null}, {label: "Region"})
viewof group = Inputs.radio(new Map([["Any group", null], ["Teens", "teens"], ["Restaurants or retail", "rest_retail"], ["Overall workforce", "overall"]]), {value: null})
viewof published = Inputs.radio([null, "Published"], {value: null, format: x => x ?? "All studies"})
```

### Distribution of own-wage elasticities from \${count_studies} minimum wage studies

```{ojs}
//| fig-cap: "{{< var citation.full >}}"
plot = Plot.plot({
  height: 700,
  marginLeft: 200,
  x: {grid: true, label: "Count"},
  y: {
    domain: ticks.map((d) => d.bin),
    tickFormat: (d, i) => ticks[i].bin_name,
    label: null
  },
  color: {legend: true},
  marks: [
    Plot.barX(final_data, Plot.groupY({x: "count"}, {y: "bin"})),
    Plot.ruleY([1.3], {stroke: "red"})
  ]
})
```
The median own-wage elasticity of these \${count_studies} studies is \${my_median_formatted} and the mean own-wage elasticity is \${my_mean_formatted}.
:::


```{ojs}
data = transpose(mw_owe_database)
ticks = transpose(tick_data)

country_filtered_data = data.filter(d => d.country == country || country == null)
group_filtered_data = {
  if (group == "overall") {
    return country_filtered_data.filter(d => d.overall == 1)
  } else if (group == "teens") {
    return country_filtered_data.filter(d => d.teens == 1)
  } else if (group == "rest_retail") {
    return country_filtered_data.filter(d => d.rest_retail == 1)
  } else {
    return country_filtered_data
  }
}
final_data = group_filtered_data.filter(d => d.published == 1 || published == null)

count_studies = d3.count(final_data, d => d.owe_b)

my_median = d3.median(final_data, d => d.owe_b)

my_median_formatted = my_median.toFixed(2)

my_mean = d3.mean(final_data, d => d.owe_b)

my_mean_formatted = my_mean.toFixed(2)

Plot = import("https://esm.sh/@observablehq/plot")
```

```{r}
#| warning: false
library(tidyverse)
data <- read_csv("mw_owe_database.csv", show_col_types = FALSE) %>% 
   mutate(bin = case_when(
    owe_b < -1.2 ~ -1.4,
    owe_b >= -1.2 & owe_b < -0.8 ~ -1.0,
    owe_b >= -0.8 & owe_b < -0.4 ~ -0.6,
    owe_b >= -0.4 & owe_b <  0.0 ~ -0.2,
    owe_b >=  0.0 & owe_b <  0.4 ~  0.2,
    owe_b >=  0.4 & owe_b <  0.8 ~  0.6,
    owe_b >=  0.8 & owe_b <  1.2 ~  1.0,
    owe_b >=  1.2 ~ 1.4
  )) %>% 
  mutate(bin_type = case_when(
    owe_b < -0.8 ~ 'Large negative',
    owe_b >= -0.8 & owe_b < -0.4 ~ 'Medium negative',
    owe_b >= -0.4 ~ 'Small negative, or positive'
  )) %>% 
  mutate(
    group = str_to_lower(group),
    teens = str_detect(group, "teens"),
    rest_retail = str_detect(group, "restaurant|retail|grocer")
  )

ojs_define(mw_owe_database = data)

tick_data <- tribble(
  ~bin, ~bin_name,
  -1.4, "More negative than -1.2",
  -1.0, "-1.2  to -0.8",
  -0.6,  "-0.8  to -0.4",
  -0.2,  "-0.4  to  0.0",
   0.2,  " 0.0  to  0.4",
   0.6,  " 0.4  to  0.8",
   1.0, " 0.8  to  1.2",
   1.4, "More positive than 1.2"
)

ojs_define(tick_data = tick_data)
```