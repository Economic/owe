---
title: "Select a subgroup"
editor: source
execute:
  echo: false
---

```{ojs}
viewof country = Inputs.radio(new Map([["Any country", null], ["United States", "US"]]), {value: null}, {label: "Region"})
viewof group = Inputs.radio(new Map([["Any group", null], ["Teens", "teens"], ["Restaurants or retail", "rest_retail"], ["Overall workforce", "overall"]]), {value: null})
viewof published = Inputs.radio([null, "Published"], {value: null, format: x => x ?? "All studies"})
```

### Distribution of own-wage elasticities from \${count_studies} minimum wage studies
The median own-wage elasticity for these \${count_studies} studies is \${my_median_formatted} and the mean own-wage elasticity is \${my_mean_formatted}.

```{ojs}
Plot.plot({
  width: 1080,
  marginLeft: 250,
  x: {
    axis: "top",
    grid: true,
    domain: [-3, 3]
  },
  y: {
    label: null,
    domain: d3.sort(final_data, d => d.owe_b).map(d => d.study)
  },
  marks: [
    Plot.ruleX(data, {
      x: 0, 
      opacity: 0.05
    }),
    Plot.ruleY(data, {
      x1: "owe_lb",
      x2: "owe_ub",
      y: "study",
      strokeWidth: 4,
      strokeOpacity: 0.3,
      strokeLinecap: "round",
      
    }),
    Plot.dot(data, {
      x: "owe_b",
      y: "study",
      r: 5,
      fill: "currentColor"
    })
  ]
})
```

```{ojs}
data = transpose(mw_owe_database)

country_filtered_data = data.filter(d => d.country == country || country == null)
group_filtered_data = {
  if (group == "overall") {
    return country_filtered_data.filter(d => d.overall == 1)
  } else if (group == "teens") {
    return country_filtered_data.filter(d => d.teens == 1)
  } else if (group == "rest_retail") {
    return country_filtered_data.filter(d => d.rest_retail == 1)
  } else {
    return country_filtered_data
  }
}
final_data = group_filtered_data.filter(d => d.published == 1 || published == null)

count_studies = d3.count(final_data, d => d.owe_b)

my_median = d3.median(final_data, d => d.owe_b)

my_median_formatted = my_median.toFixed(2)

my_mean = d3.mean(final_data, d => d.owe_b)

my_mean_formatted = my_mean.toFixed(2)
```

```{r}
#| output: false
library(tidyverse)

truncate <- function(x) {
  case_when(x > 3 ~ 3, x < -3 ~ -3, TRUE ~ x)
}

read_csv("../mw_owe_database.csv") %>% 
  mutate(across(owe_ub|owe_lb, truncate)) %>% 
  mutate(
    group = str_to_lower(group),
    teens = str_detect(group, "teens"),
    rest_retail = str_detect(group, "restaurant|retail|grocer")
  ) %>% 
  ojs_define(mw_owe_database = .) 
```
